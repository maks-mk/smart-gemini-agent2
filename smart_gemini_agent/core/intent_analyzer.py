"""
–ê–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä –Ω–∞–º–µ—Ä–µ–Ω–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
"""

import re
import logging
from typing import Dict, Any, Tuple, Optional

logger = logging.getLogger(__name__)


class IntentAnalyzer:
    """–ö–ª–∞—Å—Å –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ –Ω–∞–º–µ—Ä–µ–Ω–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    
    def __init__(self, debug_mode: bool = False):
        self.debug_mode = debug_mode
        self.context_memory: Dict[str, Any] = {}
        
        # –ü–∞—Ç—Ç–µ—Ä–Ω—ã –¥–ª—è —Ä–∞–∑–ª–∏—á–Ω—ã—Ö –æ–ø–µ—Ä–∞—Ü–∏–π
        self.intent_patterns = {
            'refactor_file': [
                r'(–∏—Å–ø—Ä–∞–≤—å|–ø–æ–ø—Ä–∞–≤—å|–æ—Ç—Ñ–æ—Ä–º–∞—Ç–∏—Ä—É–π|—É–ª—É—á—à–∏|fix|format|refactor)\s+.*(?:–≤\s+—Ñ–∞–π–ª–µ|in\s+file)\s+([\w\._-]+)'
            ],
            'create_file': [
                r'(?:—Å–æ–∑–¥–∞–π|—Å–æ–∑–¥–∞—Ç—å|—Å–¥–µ–ª–∞–π|–Ω–æ–≤—ã–π)\s+(?:excel\s+)?—Ñ–∞–π–ª\s+([^\s]+)',
                r'(?:—Å–æ–∑–¥–∞–π|—Å–æ–∑–¥–∞—Ç—å)\s+([^\s]*\.xlsx?)',
                r'(?:create|make)\s+(?:excel\s+)?file\s+([^\s]+)'
            ],
            'create_directory': [
                r'(?:—Å–æ–∑–¥–∞–π|—Å–æ–∑–¥–∞—Ç—å)\s+(?:–ø–∞–ø–∫—É|–¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é)\s+([^\s]+)',
                r'–Ω–æ–≤–∞—è\s+–ø–∞–ø–∫–∞\s+([^\s]+)',
                r'(?:create\s+folder|make\s+directory|mkdir)\s+([^\s]+)'
            ],
            'list_directory': [
                r'–ø–æ–∫–∞–∂–∏\s+—Ñ–∞–π–ª—ã',
                r'—Å–ø–∏—Å–æ–∫\s+—Ñ–∞–π–ª–æ–≤',
                r'—á—Ç–æ\s+–≤\s+–ø–∞–ø–∫–µ',
                r'—Å–æ–¥–µ—Ä–∂–∏–º–æ–µ\s+–ø–∞–ø–∫–∏\s*([^\s]*)',
                r'(?:ls|dir)\s*([^\s]*)',
                r'list\s+files'
            ],
            'read_file': [
                r'(?:–ø–æ–∫–∞–∂–∏|—á–∏—Ç–∞–π|–ø—Ä–æ—á–∏—Ç–∞–π|–æ—Ç–∫—Ä–æ–π|read|show|cat)\s+(?:—Ñ–∞–π–ª|—Å–æ–¥–µ—Ä–∂–∏–º–æ–µ)?\s*([^\s]+)',
            ],
            'delete_file': [
                r'(?:—É–¥–∞–ª–∏|—É–¥–∞–ª–∏—Ç—å|—É–±–µ—Ä–∏|delete|remove|rm)\s+(?:—Ñ–∞–π–ª)?\s*(.+)',
            ],
            'search': [
                r'(?:–Ω–∞–π–¥–∏|–ø–æ–∏—Å–∫|–∏—â–∏|search|find)\s+(.+)',
            ],
            'web_search': [
                r'(?:–Ω–∞–π–¥–∏\s+–≤\s+–∏–Ω—Ç–µ—Ä–Ω–µ—Ç–µ|–ø–æ–∏—Å–∫\s+–≤\s+—Å–µ—Ç–∏|–≥—É–≥–ª–∏|web\s+search|google)\s+(.+)',
            ]
        }
    
    def analyze_intent(self, user_input: str) -> Tuple[str, Dict[str, Any]]:
        """
        –ê–Ω–∞–ª–∏–∑ –Ω–∞–º–µ—Ä–µ–Ω–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ –∏–∑–≤–ª–µ—á–µ–Ω–∏–µ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤
        
        Args:
            user_input: –í–≤–æ–¥ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            
        Returns:
            Tuple[intent, parameters]
        """
        user_input_lower = user_input.lower().strip()
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç–Ω—ã–µ —Å—Å—ã–ª–∫–∏ –Ω–∞ –ø—Ä–µ–¥—ã–¥—É—â–∏–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã
        if self._is_context_reference(user_input_lower):
            return self._handle_context_reference(user_input_lower)
        
        # –ü–æ–∏—Å–∫ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–π –ø–æ –ø–∞—Ç—Ç–µ—Ä–Ω–∞–º
        for intent, pattern_list in self.intent_patterns.items():
            for pattern in pattern_list:
                match = re.search(pattern, user_input_lower)
                if match:
                    groups = match.groups()
                    if groups:
                        # –ù–∞—Ö–æ–¥–∏–º –ø–æ—Å–ª–µ–¥–Ω—é—é –Ω–µ–ø—É—Å—Ç—É—é –≥—Ä—É–ø–ø—É, –∫–æ—Ç–æ—Ä–∞—è –æ–±—ã—á–Ω–æ –∏ —è–≤–ª—è–µ—Ç—Å—è —Ü–µ–ª—å—é
                        target = next((g for g in reversed(groups) if g is not None), None)
                    else:
                        target = None
                    # –û—á–∏—â–∞–µ–º target –æ—Ç –ª–∏—à–Ω–∏—Ö —Å–ª–æ–≤
                    if target:
                        target = target.strip()
                        # –£–±–∏—Ä–∞–µ–º —Å–ª–æ–≤–∞-–ø–∞—Ä–∞–∑–∏—Ç—ã
                        target = re.sub(r'^(—Ñ–∞–π–ª|—Ñ–∞–π–ª–∞|file)\s+', '', target)
                        target = re.sub(r'^(–ø–∞–ø–∫—É|–ø–∞–ø–∫–∞|folder|directory)\s+', '', target)
                    
                    params = {'target': target}
                    
                    # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑ –¥–ª—è –∏–∑–≤–ª–µ—á–µ–Ω–∏—è –∫–æ–Ω—Ç–µ–Ω—Ç–∞
                    if intent == 'create_file':
                        content_match = re.search(
                            r'—Å —Å–æ–¥–µ—Ä–∂–∏–º—ã–º\s+(.+)|—Å —Ç–µ–∫—Å—Ç–æ–º\s+(.+)|with content\s+(.+)', 
                            user_input_lower
                        )
                        if content_match:
                            params['content'] = (content_match.group(1) or 
                                               content_match.group(2) or 
                                               content_match.group(3))
                    
                    if self.debug_mode:
                        logger.info(f"üéØ –ù–∞–π–¥–µ–Ω–æ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ: –ø–∞—Ç—Ç–µ—Ä–Ω='{pattern}', "
                                  f"–Ω–∞–º–µ—Ä–µ–Ω–∏–µ='{intent}', –ø–∞—Ä–∞–º–µ—Ç—Ä—ã={params}")
                    return intent, params
        
        # –ï—Å–ª–∏ —Ç–æ—á–Ω–æ–µ –Ω–∞–º–µ—Ä–µ–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ, –ø–æ–ø—Ä–æ–±—É–µ–º –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –ø–æ –∫–ª—é—á–µ–≤—ã–º —Å–ª–æ–≤–∞–º
        fallback_intent = self._analyze_fallback_keywords(user_input_lower)
        if fallback_intent:
            return fallback_intent
        
        return 'general', {}
    
    def _analyze_fallback_keywords(self, user_input_lower: str) -> Optional[Tuple[str, Dict[str, Any]]]:
        """–ê–Ω–∞–ª–∏–∑ –ø–æ –∫–ª—é—á–µ–≤—ã–º —Å–ª–æ–≤–∞–º –∫–∞–∫ fallback"""
        keyword_patterns = [
            (['—Ñ–∞–π–ª', 'file'], ['—Å–æ–∑–¥–∞–π', 'create', '–Ω–æ–≤—ã–π'], 'create_file'),
            (['–ø–∞–ø–∫–∞', 'folder', '–¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è', 'directory'], ['—Å–æ–∑–¥–∞–π', 'create', '–Ω–æ–≤–∞—è'], 'create_directory'),
            (['—á–∏—Ç–∞–π', 'read', '–ø–æ–∫–∞–∂–∏', 'show', '–æ—Ç–∫—Ä–æ–π'], [], 'read_file'),
            (['—É–¥–∞–ª–∏', 'delete', '—É–±–µ—Ä–∏', 'remove'], [], 'delete_file'),
            (['—Å–ø–∏—Å–æ–∫', '—Ñ–∞–π–ª—ã', '—Å–æ–¥–µ—Ä–∂–∏–º–æ–µ', 'ls', 'dir'], [], 'list_directory'),
        ]
        
        for primary_words, secondary_words, intent in keyword_patterns:
            has_primary = any(word in user_input_lower for word in primary_words)
            has_secondary = not secondary_words or any(word in user_input_lower for word in secondary_words)
            
            if has_primary and has_secondary:
                return intent, {'target': None}
        
        return None
    
    def _is_context_reference(self, user_input: str) -> bool:
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –≤–≤–æ–¥ —Å—Å—ã–ª–∫–æ–π –Ω–∞ –ø—Ä–µ–¥—ã–¥—É—â–∏–π –∫–æ–Ω—Ç–µ–∫—Å—Ç"""
        # –ß–∏—Å–ª–æ–≤—ã–µ —Å—Å—ã–ª–∫–∏ –Ω–∞ –≤–∞—Ä–∏–∞–Ω—Ç—ã (1, 2, 3, 4)
        if user_input in ['1', '2', '3', '4', '5']:
            return True
        
        # –ö–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞ –¥–ª—è —Å—Å—ã–ª–æ–∫ –Ω–∞ –∫–æ–Ω—Ç–µ–∫—Å—Ç (—Ç–æ–ª—å–∫–æ –∫–æ—Ä–æ—Ç–∫–∏–µ —Ñ—Ä–∞–∑—ã)
        context_keywords = [
            '–ø–µ—Ä–≤—ã–π', '–≤—Ç–æ—Ä–æ–π', '—Ç—Ä–µ—Ç–∏–π', '—á–µ—Ç–≤–µ—Ä—Ç—ã–π', '–ø—è—Ç—ã–π',
            '–ø–µ—Ä–≤—ã–π –≤–∞—Ä–∏–∞–Ω—Ç', '–≤—Ç–æ—Ä–æ–π –≤–∞—Ä–∏–∞–Ω—Ç', '—Ç—Ä–µ—Ç–∏–π –≤–∞—Ä–∏–∞–Ω—Ç',
            '–¥–∞', '–¥–∞–≤–∞–π', '—Å–¥–µ–ª–∞–π —ç—Ç–æ', '–≤—ã–ø–æ–ª–Ω–∏'
        ]
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ —ç—Ç–æ –∫–æ—Ä–æ—Ç–∫–∞—è —Ñ—Ä–∞–∑–∞ (–Ω–µ –±–æ–ª–µ–µ 2 —Å–ª–æ–≤) –∏ –Ω–µ —Å–æ–¥–µ—Ä–∂–∏—Ç –∏–º–µ–Ω–∞ —Ñ–∞–π–ª–æ–≤
        if len(user_input.split()) <= 2 and not any(ext in user_input for ext in ['.', '—Ñ–∞–π–ª']):
            return any(keyword in user_input for keyword in context_keywords)
        
        # –°–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ —Å–ª—É—á–∞–∏ –¥–ª—è –ø–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞–Ω–∏—è —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –µ—Å—Ç—å –∫–æ–Ω—Ç–µ–∫—Å—Ç —É–¥–∞–ª–µ–Ω–∏—è
        if len(user_input.split()) <= 2 and any(word in user_input for word in ['–ø–µ—Ä–µ–∏–º–µ–Ω—É–π']):
            return self.context_memory.get('last_intent') == 'delete_file'
        
        return False
    
    def _handle_context_reference(self, user_input: str) -> Tuple[str, Dict[str, Any]]:
        """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —Å—Å—ã–ª–∫–∏ –Ω–∞ –ø—Ä–µ–¥—ã–¥—É—â–∏–π –∫–æ–Ω—Ç–µ–∫—Å—Ç"""
        last_intent = self.context_memory.get('last_intent')
        last_params = self.context_memory.get('last_params', {})
        last_suggestions = self.context_memory.get('last_suggestions', [])
        
        # –ï—Å–ª–∏ —ç—Ç–æ —á–∏—Å–ª–æ–≤–∞—è —Å—Å—ã–ª–∫–∞ –Ω–∞ –≤–∞—Ä–∏–∞–Ω—Ç
        if user_input in ['1', '2', '3', '4', '5']:
            option_num = int(user_input) - 1
            
            if last_intent == 'delete_file' and last_suggestions:
                target_file = last_params.get('target')
                
                if option_num == 0:  # –ü–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞—Ç—å —Ñ–∞–π–ª
                    return 'move_file', {
                        'target': target_file,
                        'action': 'rename_to_backup',
                        'context_action': 'rename_for_deletion'
                    }
                elif option_num == 1:  # –ü–µ—Ä–µ–º–µ—Å—Ç–∏—Ç—å –≤ –ø–∞–ø–∫—É –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è
                    return 'move_file', {
                        'target': target_file,
                        'action': 'move_to_delete_folder',
                        'context_action': 'move_for_deletion'
                    }
                elif option_num == 2:  # –û—á–∏—Å—Ç–∏—Ç—å —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ
                    return 'write_file', {
                        'target': target_file,
                        'content': '',
                        'context_action': 'clear_content'
                    }
        
        # –ï—Å–ª–∏ —ç—Ç–æ —Ç–µ–∫—Å—Ç–æ–≤–∞—è —Å—Å—ã–ª–∫–∞ –Ω–∞ –ø–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ
        if any(word in user_input for word in ['–ø–µ—Ä–µ–∏–º–µ–Ω—É–π', 'rename']):
            if last_intent == 'delete_file':
                return 'move_file', {
                    'target': last_params.get('target'),
                    'action': 'rename_to_backup',
                    'context_action': 'rename_for_deletion'
                }
        
        # –ï—Å–ª–∏ —ç—Ç–æ –æ–±—â–∞—è —Å—Å—ã–ª–∫–∞ –Ω–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –¥–µ–π—Å—Ç–≤–∏—è
        if any(word in user_input for word in ['–¥–∞', '–¥–∞–≤–∞–π', '—Å–¥–µ–ª–∞–π', '–≤—ã–ø–æ–ª–Ω–∏']):
            if last_intent and last_params:
                return last_intent, last_params
        
        return 'general', {'context_reference': True, 'original_input': user_input}
    
    def update_context_memory(self, intent: str, params: Dict[str, Any], response: Any = None):
        """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫–æ–Ω—Ç–µ–∫—Å—Ç–Ω–æ–π –ø–∞–º—è—Ç–∏"""
        self.context_memory.update({
            'last_intent': intent,
            'last_params': params,
            'last_response': response
        })
        
        if self.debug_mode:
            logger.debug(f"–û–±–Ω–æ–≤–ª–µ–Ω–∞ –∫–æ–Ω—Ç–µ–∫—Å—Ç–Ω–∞—è –ø–∞–º—è—Ç—å: intent={intent}, params={params}")
    
    def get_context_memory(self) -> Dict[str, Any]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –∫–æ–Ω—Ç–µ–∫—Å—Ç–Ω–æ–π –ø–∞–º—è—Ç–∏"""
        return self.context_memory.copy()
    
    def clear_context_memory(self):
        """–û—á–∏—Å—Ç–∫–∞ –∫–æ–Ω—Ç–µ–∫—Å—Ç–Ω–æ–π –ø–∞–º—è—Ç–∏"""
        self.context_memory.clear()
        if self.debug_mode:
            logger.debug("–ö–æ–Ω—Ç–µ–∫—Å—Ç–Ω–∞—è –ø–∞–º—è—Ç—å –æ—á–∏—â–µ–Ω–∞")