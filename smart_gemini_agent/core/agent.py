"""
–û—Å–Ω–æ–≤–Ω–æ–π –∫–ª–∞—Å—Å Smart Gemini Agent
"""

import os
import re

import logging
from typing import Dict, Any, List, Optional, AsyncGenerator
from langchain_google_genai import ChatGoogleGenerativeAI
from google.api_core.exceptions import ResourceExhausted
from langchain_mcp_adapters.client import MultiServerMCPClient
from langchain_core.messages import HumanMessage
from langgraph.prebuilt import create_react_agent
from langgraph.checkpoint.memory import InMemorySaver

from ..config.agent_config import AgentConfig
from ..tools.delete_tools import SafeDeleteFileTool, SafeDeleteDirectoryTool
from ..tools.tool_analyzer import ToolAnalyzer
from ..utils.decorators import retry_on_failure, retry_on_failure_async_gen
from .intent_analyzer import IntentAnalyzer
from .prompt_manager import PromptManager
from .response_formatter import ResponseFormatter

logger = logging.getLogger(__name__)


class FileSystemAgent:
    """
    –£–º–Ω—ã–π AI-–∞–≥–µ–Ω—Ç –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å —Ñ–∞–π–ª–æ–≤–æ–π —Å–∏—Å—Ç–µ–º–æ–π –Ω–∞ –±–∞–∑–µ Google Gemini
    —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π Model Context Protocol (MCP)
    """
    
    def __init__(self, config: AgentConfig):
        self.config = config
        self.agent = None
        self.checkpointer = None
        self.mcp_client = None
        self.tools = []
        self._initialized = False
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã
        self.tool_analyzer = ToolAnalyzer()
        self.intent_analyzer = IntentAnalyzer(debug_mode=config.debug_intent_analysis)
        self.prompt_manager = PromptManager(config)
        self.response_formatter = ResponseFormatter(debug_mode=config.debug_intent_analysis)
        
        logger.info("–°–æ–∑–¥–∞–Ω —É–º–Ω—ã–π –∞–≥–µ–Ω—Ç —Å Gemini")
        logger.info(f"–†–∞–±–æ—á–∞—è –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è: {config.filesystem_path}")
    
    @property
    def is_ready(self) -> bool:
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç—å –∞–≥–µ–Ω—Ç–∞"""
        return self._initialized and self.agent is not None
    
    async def initialize(self) -> bool:
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∞–≥–µ–Ω—Ç–∞"""
        if self._initialized:
            logger.warning("–ê–≥–µ–Ω—Ç —É–∂–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
            return True
        
        logger.info("–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∞–≥–µ–Ω—Ç–∞...")
        
        try:
            self.config.validate()
            await self._init_mcp_client()
            
            # –°–æ–∑–¥–∞–Ω–∏–µ Gemini –º–æ–¥–µ–ª–∏
            api_key = os.getenv("GOOGLE_API_KEY")
            model = ChatGoogleGenerativeAI(
                model=self.config.model_name,
                google_api_key=api_key,
                temperature=self.config.temperature
            )
            
            if self.config.use_memory:
                self.checkpointer = InMemorySaver()
                logger.info("–ü–∞–º—è—Ç—å –∞–≥–µ–Ω—Ç–∞ –≤–∫–ª—é—á–µ–Ω–∞")
            
            # –û–±–Ω–æ–≤–ª—è–µ–º –∞–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤ –≤ –º–µ–Ω–µ–¥–∂–µ—Ä–µ –ø—Ä–æ–º–ø—Ç–æ–≤
            self.prompt_manager.update_tool_analyzer(self.tool_analyzer)
            
            self.agent = create_react_agent(
                model=model,
                tools=self.tools,
                checkpointer=self.checkpointer,
                prompt=self.prompt_manager.get_system_prompt()
            )
            
            self._initialized = True
            logger.info("‚úÖ –ê–≥–µ–Ω—Ç —É—Å–ø–µ—à–Ω–æ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
            return True
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏: {e}")
            return False
    
    @retry_on_failure()
    async def _init_mcp_client(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è MCP –∫–ª–∏–µ–Ω—Ç–∞"""
        logger.info("–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è MCP –∫–ª–∏–µ–Ω—Ç–∞...")
        
        # –í—Ä–µ–º–µ–Ω–Ω–æ –ø–æ–¥–∞–≤–∏—Ç—å –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è –≤–æ –≤—Ä–µ–º—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏
        old_level = logging.getLogger().level
        logging.getLogger().setLevel(logging.ERROR)
        
        try:
            self.mcp_client = MultiServerMCPClient(self.config.get_mcp_config())
            self.tools = await self.mcp_client.get_tools()
        finally:
            # –í–æ—Å—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —É—Ä–æ–≤–µ–Ω—å –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
            logging.getLogger().setLevel(old_level)
        
        if not self.tools:
            raise Exception("–ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö MCP –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤")
        
        # –î–æ–±–∞–≤–ª—è–µ–º –ª–æ–∫–∞–ª—å–Ω—ã–µ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è
        self._add_local_tools()
        
        # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –∏ –∫–∞—Ç–µ–≥–æ—Ä–∏–∑–∏—Ä—É–µ–º –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã
        self.tools_map = self.tool_analyzer.analyze_tools(self.tools)
        
        logger.info(f"–ó–∞–≥—Ä—É–∂–µ–Ω–æ {len(self.tools)} –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤")
        for tool in self.tools:
            logger.info(f"  ‚Ä¢ {tool.name}")
    
    def _add_local_tools(self):
        """–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –ª–æ–∫–∞–ª—å–Ω—ã—Ö –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤"""
        # –°–æ–∑–¥–∞–µ–º –ª–æ–∫–∞–ª—å–Ω—ã–µ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è
        delete_file_tool = SafeDeleteFileTool(self.config.filesystem_path)
        delete_dir_tool = SafeDeleteDirectoryTool(self.config.filesystem_path)
        
        # –î–æ–±–∞–≤–ª—è–µ–º –∫ —Å–ø–∏—Å–∫—É –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤
        self.tools.extend([delete_file_tool, delete_dir_tool])
        
        logger.info("–î–æ–±–∞–≤–ª–µ–Ω—ã –ª–æ–∫–∞–ª—å–Ω—ã–µ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã:")
        logger.info(f"  ‚Ä¢ {delete_file_tool.name}: {delete_file_tool.description}")
        logger.info(f"  ‚Ä¢ {delete_dir_tool.name}: {delete_dir_tool.description}")
    
    @retry_on_failure_async_gen()
    async def process_message(self, user_input: str, thread_id: str = "default") -> AsyncGenerator[Dict, None]:
        """–£–º–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å –∞–Ω–∞–ª–∏–∑–æ–º –Ω–∞–º–µ—Ä–µ–Ω–∏–π –∏ —Å—Ç—Ä–∏–º–∏–Ω–≥–æ–º —à–∞–≥–æ–≤"""
        if not self.is_ready:
            yield {"error": "–ê–≥–µ–Ω—Ç –Ω–µ –≥–æ—Ç–æ–≤. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–µ—Ä–µ–∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å."}
            return
        
        try:
            # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –Ω–∞–º–µ—Ä–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            intent, params = self.intent_analyzer.analyze_intent(user_input)
            logger.info(f"–û–ø—Ä–µ–¥–µ–ª–µ–Ω–æ –Ω–∞–º–µ—Ä–µ–Ω–∏–µ: {intent}, –ø–∞—Ä–∞–º–µ—Ç—Ä—ã: {params}")

            # –£–õ–£–ß–®–ï–ù–ò–ï: –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –Ω–∞ –∞–¥–µ–∫–≤–∞—Ç–Ω–æ—Å—Ç—å (–≥–∏–±–∫–∞—è –≤–µ—Ä—Å–∏—è)
            file_intents = ['read_file', 'write_file', 'delete_file', 'refactor_file', 'move_file']
            if intent in file_intents:
                target = params.get('target')
                # –ë–ª–æ–∫–∏—Ä—É–µ–º —Ç–æ–ª—å–∫–æ –∑–∞–≤–µ–¥–æ–º–æ –Ω–µ–≤–µ—Ä–Ω—ã–µ –∏–º–µ–Ω–∞, –Ω–æ –ø—Ä–æ–ø—É—Å–∫–∞–µ–º None,
                # —á—Ç–æ–±—ã –¥–∞—Ç—å –∞–≥–µ–Ω—Ç—É —à–∞–Ω—Å –¥–æ–≥–∞–¥–∞—Ç—å—Å—è –ø–æ –∫–æ–Ω—Ç–µ–∫—Å—Ç—É.
                invalid_keywords = ['–∏—Å–ø—Ä–∞–≤—å', '–ø–æ–ø—Ä–∞–≤—å', '—É–ª—É—á—à–∏', '—Å–æ–∑–¥–∞–π', '—É–¥–∞–ª–∏', '–ø—Ä–æ—á–∏—Ç–∞–π', '–ø–æ–∫–∞–∂–∏']
                if target and target in invalid_keywords:
                    logger.warning(f"–ù–µ–¥–æ–ø—É—Å—Ç–∏–º–æ–µ –∏–º—è —Ñ–∞–π–ª–∞ –¥–ª—è –Ω–∞–º–µ—Ä–µ–Ω–∏—è '{intent}': {target}")
                    yield {"error": f"–Ø –Ω–µ —Å–º–æ–≥ –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∏–º—è —Ñ–∞–π–ª–∞ –≤ –≤–∞—à–µ–º –∑–∞–ø—Ä–æ—Å–µ. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É—Ç–æ—á–Ω–∏—Ç–µ, —Å –∫–∞–∫–∏–º —Ñ–∞–π–ª–æ–º –Ω—É–∂–Ω–æ —Ä–∞–±–æ—Ç–∞—Ç—å."}
                    return
            
            # –°–æ–∑–¥–∞–µ–º —É–ª—É—á—à–µ–Ω–Ω—ã–π –∫–æ–Ω—Ç–µ–∫—Å—Ç –Ω–∞ –æ—Å–Ω–æ–≤–µ –∞–Ω–∞–ª–∏–∑–∞
            enhanced_input = self._create_enhanced_context(user_input, intent, params)
            
            config = {"configurable": {"thread_id": thread_id}}
            message_input = {"messages": [HumanMessage(content=enhanced_input)]}
            
            async for chunk in self.agent.astream(message_input, config):
                yield chunk
            
        except ResourceExhausted as e:
            error_text = str(e)
            retry_secs = None
            m = re.search(r"retry_delay\s*{\s*seconds:\s*(\d+)", error_text)
            if m:
                retry_secs = int(m.group(1))
            
            wait_hint = f"–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–æ–∂–¥–∏—Ç–µ –ø—Ä–∏–º–µ—Ä–Ω–æ {retry_secs} —Å–µ–∫—É–Ω–¥ –∏ –ø–æ–≤—Ç–æ—Ä–∏—Ç–µ –ø–æ–ø—ã—Ç–∫—É." if retry_secs else "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–æ–∂–¥–∏—Ç–µ –Ω–µ–º–Ω–æ–≥–æ –∏ –ø–æ–≤—Ç–æ—Ä–∏—Ç–µ –ø–æ–ø—ã—Ç–∫—É."
            
            friendly_error = (
                f"üòî **–ü—Ä–µ–≤—ã—à–µ–Ω—ã –ª–∏–º–∏—Ç—ã API Gemini (–æ—à–∏–±–∫–∞ 429)**\n\n"
                f"{wait_hint}\n\n"
                f"–ü–æ–¥—Ä–æ–±–Ω–µ–µ –æ –∫–≤–æ—Ç–∞—Ö: https://ai.google.dev/gemini-api/docs/rate-limits"
            )
            yield {"error": friendly_error}
            
        except Exception as e:
            error_text = str(e)
            final_error_msg = f"‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏: {error_text}"
            logger.error(final_error_msg)
            import traceback
            logger.error(f"–¢—Ä–∞—Å—Å–∏—Ä–æ–≤–∫–∞: {traceback.format_exc()}")
            yield {"error": final_error_msg}

    
    def _create_enhanced_context(self, user_input: str, intent: str, params: Dict[str, Any]) -> str:
        """–°–æ–∑–¥–∞–Ω–∏–µ —É–ª—É—á—à–µ–Ω–Ω–æ–≥–æ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞ –Ω–∞ –æ—Å–Ω–æ–≤–µ –∞–Ω–∞–ª–∏–∑–∞ –Ω–∞–º–µ—Ä–µ–Ω–∏–π"""
        base_context = f"–†–∞–±–æ—á–∞—è –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è: '{self.config.filesystem_path}'"

        # –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã—Ö —Ç–∏–ø–æ–≤ —Ñ–∞–π–ª–æ–≤
        instruction = self._handle_special_file_types(user_input, intent, params)
        if not instruction:
            instruction = self._get_intent_instruction(intent)

        enhanced_context = f"""
{base_context}

{instruction}

–ó–ê–ü–†–û–° –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–Ø: {user_input}

–ü–ê–†–ê–ú–ï–¢–†–´: {params if params else '–ù–µ –∏–∑–≤–ª–µ—á–µ–Ω—ã'}
"""
        
        return enhanced_context.strip()

    def _get_intent_instruction(self, intent: str) -> str:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ –ø–æ –Ω–∞–º–µ—Ä–µ–Ω–∏—é."""
        intent_instructions = {
            'create_file': f"–ó–ê–î–ê–ß–ê: –°–æ–∑–¥–∞—Ç—å —Ñ–∞–π–ª. –†–µ–∫–æ–º–µ–Ω–¥—É–µ–º—ã–µ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã: {[t.name for t in self.tools_map.get('write_file', [])]}",
            'create_directory': f"–ó–ê–î–ê–ß–ê: –°–æ–∑–¥–∞—Ç—å –ø–∞–ø–∫—É. –†–µ–∫–æ–º–µ–Ω–¥—É–µ–º—ã–µ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã: {[t.name for t in self.tools_map.get('create_directory', [])]}",
            'read_file': f"–ó–ê–î–ê–ß–ê: –ü—Ä–æ—á–∏—Ç–∞—Ç—å —Ñ–∞–π–ª. –†–µ–∫–æ–º–µ–Ω–¥—É–µ–º—ã–µ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã: {[t.name for t in self.tools_map.get('read_file', [])]}",
            'list_directory': f"–ó–ê–î–ê–ß–ê: –ü–æ–∫–∞–∑–∞—Ç—å —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ –ø–∞–ø–∫–∏. –†–µ–∫–æ–º–µ–Ω–¥—É–µ–º—ã–µ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã: {[t.name for t in self.tools_map.get('list_directory', [])]}",
            'delete_file': self._get_delete_instruction(),
            'search': f"–ó–ê–î–ê–ß–ê: –ü–æ–∏—Å–∫. –†–µ–∫–æ–º–µ–Ω–¥—É–µ–º—ã–µ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã: {[t.name for t in self.tools_map.get('search', [])]}",
            'web_search': f"–ó–ê–î–ê–ß–ê: –í–µ–±-–ø–æ–∏—Å–∫. –†–µ–∫–æ–º–µ–Ω–¥—É–µ–º—ã–µ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã: {[t.name for t in self.tools_map.get('web_search', [])]}"
        }
        return intent_instructions.get(intent, "–ó–ê–î–ê–ß–ê: –û–±—â–∏–π –∑–∞–ø—Ä–æ—Å")

    def _handle_special_file_types(self, user_input: str, intent: str, params: Dict[str, Any]) -> Optional[str]:
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã—Ö —Ç–∏–ø–æ–≤ —Ñ–∞–π–ª–æ–≤, —Ç–∞–∫–∏—Ö –∫–∞–∫ Excel."""
        target_file = params.get('target', '')
        if not target_file:
            return None

        if target_file.endswith(('.xlsx', '.xls')):
            return self._handle_excel_files(user_input, intent, params)

        return None

    def _handle_excel_files(self, user_input: str, intent: str, params: Dict[str, Any]) -> Optional[str]:
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ Excel —Ñ–∞–π–ª–æ–≤."""
        excel_tools = [t for t in self.tools if 'excel' in t.name.lower()]
        if not excel_tools:
            return None

        target_file = params.get('target', '')
        if not os.path.isabs(target_file):
            absolute_path = os.path.join(self.config.filesystem_path, target_file)
            params['target'] = absolute_path
            logger.info(f"–ü—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω –æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω—ã–π –ø—É—Ç—å {target_file} –≤ –∞–±—Å–æ–ª—é—Ç–Ω—ã–π {absolute_path}")

        wants_chart = bool(re.search(r"(–¥–∏–∞–≥—Ä–∞–º|chart|–≥—Ä–∞—Ñ–∏–∫)", user_input, re.IGNORECASE))
        if intent == 'create_file' and wants_chart:
            return (
                f"–°–ü–ï–¶–ò–ê–õ–¨–ù–ê–Ø –ó–ê–î–ê–ß–ê: –°–æ–∑–¥–∞—Ç—å Excel —Ñ–∞–π–ª —Å –¥–∏–∞–≥—Ä–∞–º–º–æ–π. "
                f"–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ Excel-—Å–ø–µ—Ü–∏—Ñ–∏—á–Ω—ã–µ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã: {[t.name for t in excel_tools]}. "
                f"–í–ê–ñ–ù–û: –°–æ–∑–¥–∞–π—Ç–µ –ø—Ä–æ—Å—Ç—É—é –∫—Ä—É–≥–æ–≤—É—é –¥–∏–∞–≥—Ä–∞–º–º—É —Å –±–∞–∑–æ–≤—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏. –ü—É—Ç—å –∫ —Ñ–∞–π–ª—É: {params['target']}"
            )
        return None
    
    def _get_delete_instruction(self) -> str:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è —Å –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–æ–º –±–µ–∑–æ–ø–∞—Å–Ω—ã—Ö –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤"""
        delete_tools = self.tools_map.get('delete_file', [])
        safe_tools = [t for t in delete_tools if 'safe_delete' in t.name]
        
        if safe_tools:
            return f"–ó–ê–î–ê–ß–ê: –£–¥–∞–ª–µ–Ω–∏–µ —Ñ–∞–π–ª–∞/–ø–∞–ø–∫–∏. –ü–†–ò–û–†–ò–¢–ï–¢: {[t.name for t in safe_tools]} (–±–µ–∑–æ–ø–∞—Å–Ω—ã–µ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã)"
        else:
            return f"–ó–ê–î–ê–ß–ê: –£–¥–∞–ª–µ–Ω–∏–µ —Ñ–∞–π–ª–∞/–ø–∞–ø–∫–∏. –î–æ—Å—Ç—É–ø–Ω—ã–µ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã: {[t.name for t in delete_tools]}"
    
    def get_status(self) -> Dict[str, Any]:
        """–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Å–æ—Å—Ç–æ—è–Ω–∏–∏ —É–º–Ω–æ–≥–æ –∞–≥–µ–Ω—Ç–∞"""
        tools_by_category = {k: len(v) for k, v in self.tools_map.items() if v}
        context_memory = self.intent_analyzer.get_context_memory()
        
        return {
            'initialized': self._initialized,
            'ready': self.is_ready,
            'model_name': self.config.model_name,
            'temperature': self.config.temperature,
            'use_memory': self.config.use_memory,
            'working_directory': self.config.filesystem_path,
            'total_tools': len(self.tools),
            'tools_by_category': tools_by_category,
            'context_memory_items': len(context_memory),
            'last_intent': context_memory.get('last_intent'),
            'intelligence_features': [
                'Intent Analysis',
                'Context Memory', 
                'Smart Tool Selection',
                'File Formatting',
                'Universal MCP Support'
            ]
        }
    
    def reload_prompt(self) -> str:
        """–ü–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–∞ –ø—Ä–æ–º–ø—Ç–∞ –∏–∑ —Ñ–∞–π–ª–∞"""
        return self.prompt_manager.reload_prompt()
    
    def clear_context_memory(self):
        """–û—á–∏—Å—Ç–∫–∞ –∫–æ–Ω—Ç–µ–∫—Å—Ç–Ω–æ–π –ø–∞–º—è—Ç–∏"""
        self.intent_analyzer.clear_context_memory()
        logger.info("–ö–æ–Ω—Ç–µ–∫—Å—Ç–Ω–∞—è –ø–∞–º—è—Ç—å –æ—á–∏—â–µ–Ω–∞")
    
    def get_tools_by_category(self, category: str) -> List:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤ –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏"""
        return self.tools_map.get(category, [])
    
    def get_available_categories(self) -> List[str]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫–∞—Ç–µ–≥–æ—Ä–∏–π –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤"""
        return [cat for cat, tools in self.tools_map.items() if tools]