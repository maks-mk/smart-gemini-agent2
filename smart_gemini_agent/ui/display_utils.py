"""
–£—Ç–∏–ª–∏—Ç—ã –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –¥–ª—è Rich –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞
"""

import os
from pathlib import Path
from typing import Dict, Any, List, Optional
from datetime import datetime

from rich.console import Console
from rich.table import Table
from rich.panel import Panel
from rich.columns import Columns
from rich.tree import Tree
from rich.text import Text
from rich.markdown import Markdown
from rich.syntax import Syntax
from rich import box
from rich.rule import Rule
from rich.align import Align


class DisplayUtils:
    """–£—Ç–∏–ª–∏—Ç—ã –¥–ª—è –∫—Ä–∞—Å–∏–≤–æ–≥–æ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –≤ —Ç–µ—Ä–º–∏–Ω–∞–ª–µ"""
    
    def __init__(self, console: Console):
        self.console = console
    
    def print_header(self):
        """–û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∑–∞–≥–æ–ª–æ–≤–∫–∞ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è"""
        header_text = Text("üß† Smart Gemini FileSystem Agent", style="bold white")
        subtitle_text = Text("Intelligent file operations with intent analysis", style="dim white")
        
        header_panel = Panel(
            Align.center(f"{header_text}\n{subtitle_text}"),
            style="bold blue",
            box=box.DOUBLE
        )
        
        self.console.print(header_panel)
        self.console.print()
    
    def print_status_bar(self, agent=None):
        """–°—Ç–∞—Ç—É—Å-–±–∞—Ä —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ —Å–∏—Å—Ç–µ–º–µ"""
        if not agent:
            status_text = "üîß Agent not initialized"
        else:
            status = agent.get_status()
            tools_count = status.get('total_tools', 0)
            memory_status = "üß† Memory" if status.get('use_memory', False) else "üö´ No Memory"
            
            status_text = (
                          f"üîß Smart Gemini Agent "
                          f"üìÅ {os.path.basename(status.get('working_directory', '/'))} "
                          f"{memory_status} "
                          f"üîß {tools_count} tools "
                          f"üí¨ Thread: main")
        
        status_panel = Panel(
            status_text,
            title="System Status",
            style="dim blue",
            box=box.ROUNDED
        )
        
        self.console.print(status_panel)

    def display_tool_call(self, tool_name: str, tool_args: dict):
        """–û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –≤—ã–∑–æ–≤–∞ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∞"""
        self.console.print(Panel(
            f"[bold cyan]{tool_name}[/bold cyan]\n[dim]{tool_args}[/dim]",
            title="[yellow]üõ†Ô∏è Calling Tool[/yellow]",
            border_style="yellow",
            expand=False
        ))

    def display_tool_result(self, tool_name: str, content: str):
        """–û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ —Ä–∞–±–æ—Ç—ã –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∞"""
        # –û–±—Ä–µ–∑–∞–µ–º –¥–ª–∏–Ω–Ω—ã–π –≤—ã–≤–æ–¥
        if len(content) > 300:
            content = content[:300] + "..."
        self.console.print(Panel(
            f"[dim]{content}[/dim]",
            title=f"[green]‚úÖ Tool '{tool_name}' Result[/green]",
            border_style="green",
            expand=False
        ))

    def display_agent_thought(self, thought: str):
        """–û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –º—ã—Å–ª–µ–π –∞–≥–µ–Ω—Ç–∞"""
        self.console.print(Panel(
            f"[dim italic]{thought}[/dim italic]",
            title="[bold dim]ü§î Thinking...[/bold dim]",
            border_style="dim",
            expand=False
        ))

    def display_file_tree(self, start_path: str, max_depth: int = 3, show_hidden: bool = False):
        """–û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –¥–µ—Ä–µ–≤–∞ —Ñ–∞–π–ª–æ–≤"""
        path = Path(start_path)
        if not path.exists():
            self.display_error(f"Path does not exist: {start_path}")
            return

        def add_tree_items(tree_node, current_path, current_depth: int = 0):
            if current_depth >= max_depth:
                return
            
            try:
                items = []
                path_obj = Path(current_path)
                
                for item in path_obj.iterdir():
                    if not show_hidden and item.name.startswith('.'):
                        continue
                    items.append(item)
                
                items.sort(key=lambda x: (not x.is_dir(), x.name.lower()))
                
                for item in items:
                    if item.is_dir():
                        branch = tree_node.add(f"üìÅ {item.name}/", style="bold blue")
                        add_tree_items(branch, item, current_depth + 1)
                    else:
                        try:
                            size = item.stat().st_size
                            size_str = self._format_file_size(size)
                            tree_node.add(f"{self._get_file_emoji(item.name)} {item.name} [dim]({size_str})[/dim]", style=self._get_file_color(item.name))
                        except (OSError, PermissionError):
                            tree_node.add(f"{self._get_file_emoji(item.name)} {item.name} [dim](access denied)[/dim]", style="red")
                            
            except PermissionError:
                tree_node.add("‚ùå Access denied", style="red")
        
        tree = Tree(f"üìÇ {Path(path).name or path}", style="bold green")
        add_tree_items(tree, path, 0)
        
        panel = Panel(
            tree,
            title=f"[bold]File Tree: {path}[/bold]",
            border_style="green"
        )
        self.console.print(panel)
    
    def _format_file_size(self, size_bytes: int) -> str:
        """–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–∞–∑–º–µ—Ä–∞ —Ñ–∞–π–ª–∞"""
        if size_bytes == 0:
            return "0 B"
        
        size_names = ["B", "KB", "MB", "GB", "TB"]
        i = 0
        size = float(size_bytes)
        
        while size >= 1024.0 and i < len(size_names) - 1:
            size /= 1024.0
            i += 1
        
        return f"{size:.1f} {size_names[i]}"
    
    def _get_file_emoji(self, filename: str) -> str:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —ç–º–æ–¥–∑–∏ –¥–ª—è —Ñ–∞–π–ª–∞ –ø–æ —Ä–∞—Å—à–∏—Ä–µ–Ω–∏—é"""
        extension = filename.lower().split('.')[-1] if '.' in filename else ''
        
        emoji_map = {
            'py': 'üêç', 'js': 'üìú', 'ts': 'üìò', 'json': 'üìã',
            'md': 'üìù', 'txt': 'üìÑ', 'pdf': 'üìï', 'doc': 'üìò', 'docx': 'üìò',
            'xls': 'üìä', 'xlsx': 'üìä', 'csv': 'üìä',
            'jpg': 'üñºÔ∏è', 'jpeg': 'üñºÔ∏è', 'png': 'üñºÔ∏è', 'gif': 'üñºÔ∏è', 'svg': 'üñºÔ∏è',
            'mp4': 'üé¨', 'avi': 'üé¨', 'mov': 'üé¨',
            'mp3': 'üéµ', 'wav': 'üéµ', 'flac': 'üéµ',
            'zip': 'üì¶', 'rar': 'üì¶', '7z': 'üì¶', 'tar': 'üì¶',
            'exe': '‚öôÔ∏è', 'msi': '‚öôÔ∏è', 'deb': '‚öôÔ∏è', 'rpm': '‚öôÔ∏è',
            'html': 'üåê', 'css': 'üé®', 'xml': 'üì∞',
            'sql': 'üóÉÔ∏è', 'db': 'üóÉÔ∏è', 'sqlite': 'üóÉÔ∏è',
            'log': 'üìú', 'cfg': '‚öôÔ∏è', 'conf': '‚öôÔ∏è', 'ini': '‚öôÔ∏è'
        }
        
        return emoji_map.get(extension, 'üìÑ')
    
    def _get_file_color(self, filename: str) -> str:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Ü–≤–µ—Ç–∞ –¥–ª—è —Ñ–∞–π–ª–∞ –ø–æ —Ä–∞—Å—à–∏—Ä–µ–Ω–∏—é"""
        extension = filename.lower().split('.')[-1] if '.' in filename else ''
        
        color_map = {
            'py': 'green', 'js': 'yellow', 'ts': 'blue', 'json': 'cyan',
            'md': 'magenta', 'txt': 'white',
            'jpg': 'bright_magenta', 'jpeg': 'bright_magenta', 'png': 'bright_magenta',
            'mp4': 'red', 'mp3': 'bright_green',
            'zip': 'bright_yellow', 'exe': 'bright_red',
            'html': 'bright_blue', 'css': 'bright_cyan',
            'log': 'dim white'
        }
        
        return color_map.get(extension, 'white')
    
    def display_help(self):
        """–û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å–ø—Ä–∞–≤–∫–∏ –ø–æ –∫–æ–º–∞–Ω–¥–∞–º"""
        commands = {
            "–°–∏—Å—Ç–µ–º–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã": {
                "/help": "–ü–æ–∫–∞–∑–∞—Ç—å —ç—Ç—É —Å–ø—Ä–∞–≤–∫—É",
                "/status": "–°—Ç–∞—Ç—É—Å –∞–≥–µ–Ω—Ç–∞ –∏ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤",
                "/history [N]": "–ò—Å—Ç–æ—Ä–∏—è –∫–æ–º–∞–Ω–¥ (–ø–æ—Å–ª–µ–¥–Ω–∏–µ N)",
                "/clear": "–û—á–∏—Å—Ç–∏—Ç—å —ç–∫—Ä–∞–Ω",
                "/tree [path]": "–ü–æ–∫–∞–∑–∞—Ç—å —Ñ–∞–π–ª–æ–≤—É—é —Å—Ç—Ä—É–∫—Ç—É—Ä—É",
                "/tools": "–ü–æ–∫–∞–∑–∞—Ç—å –¥–æ—Å—Ç—É–ø–Ω—ã–µ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã",
                "/export": "–≠–∫—Å–ø–æ—Ä—Ç –∏—Å—Ç–æ—Ä–∏–∏ –≤ —Ñ–∞–π–ª",
                "/quit": "–í—ã—Ö–æ–¥ –∏–∑ –ø—Ä–æ–≥—Ä–∞–º–º—ã"
            },
            "–§–∞–π–ª–æ–≤—ã–µ –æ–ø–µ—Ä–∞—Ü–∏–∏": {
                "—Å–æ–∑–¥–∞–π —Ñ–∞–π–ª test.txt": "–°–æ–∑–¥–∞—Ç—å –Ω–æ–≤—ã–π —Ñ–∞–π–ª",
                "–ø—Ä–æ—á–∏—Ç–∞–π config.py": "–ü–æ–∫–∞–∑–∞—Ç—å —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ —Ñ–∞–π–ª–∞",
                "—É–¥–∞–ª–∏ —Å—Ç–∞—Ä—ã–π.txt": "–£–¥–∞–ª–∏—Ç—å —Ñ–∞–π–ª (–±–µ–∑–æ–ø–∞—Å–Ω–æ)",
                "–ø–æ–∫–∞–∂–∏ —Ñ–∞–π–ª—ã": "–°–ø–∏—Å–æ–∫ —Ñ–∞–π–ª–æ–≤ –≤ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏",
                "–Ω–∞–π–¥–∏ *.py": "–ü–æ–∏—Å–∫ —Ñ–∞–π–ª–æ–≤ –ø–æ –º–∞—Å–∫–µ"
            },
            "–í–µ–±-–æ–ø–µ—Ä–∞—Ü–∏–∏": {
                "–Ω–∞–π–¥–∏ –≤ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç–µ Python": "–ü–æ–∏—Å–∫ –≤ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç–µ",
                "—Å–∫–∞—á–∞–π https://...": "–ó–∞–≥—Ä—É–∑–∏—Ç—å —Ñ–∞–π–ª –ø–æ URL"
            }
        }
        
        help_panels = []
        for category, cmds in commands.items():
            table = Table(show_header=False, box=None, padding=(0, 1))
            table.add_column("Command", style="cyan", no_wrap=True)
            table.add_column("Description", style="white")
            
            for cmd, desc in cmds.items():
                table.add_row(cmd, desc)
            
            panel = Panel(table, title=f"[bold]{category}[/bold]", border_style="blue")
            help_panels.append(panel)
        
        self.console.print(Columns(help_panels, equal=True, expand=True))
    
    def display_history(self, history: List, limit: int = 10):
        """–û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∏—Å—Ç–æ—Ä–∏–∏ –∫–æ–º–∞–Ω–¥"""
        if not history:
            self.console.print("[yellow]–ò—Å—Ç–æ—Ä–∏—è –ø—É—Å—Ç–∞[/yellow]")
            return
        
        table = Table(title="–ò—Å—Ç–æ—Ä–∏—è –∫–æ–º–∞–Ω–¥", box=box.ROUNDED)
        table.add_column("#", style="dim", width=4)
        table.add_column("–í—Ä–µ–º—è", style="cyan", width=20)
        table.add_column("–¢–∏–ø", style="magenta", width=10)
        table.add_column("–ö–æ–º–∞–Ω–¥–∞/–û—Ç–≤–µ—Ç", style="white")
        
        recent_history = history[-limit:] if len(history) > limit else history
        
        for i, entry in enumerate(recent_history, 1):
            timestamp = entry.get('timestamp', 'N/A')
            entry_type = entry.get('type', 'unknown')
            content = entry.get('content', '')
            
            if len(content) > 80:
                content = content[:77] + "..."
            
            type_style = {
                'user': 'green',
                'agent': 'blue', 
                'error': 'red'
            }.get(entry_type, 'white')
            
            table.add_row(str(i), timestamp, f"[{type_style}]{entry_type}[/{type_style}]", content)
        
        self.console.print(table)
    
    def display_agent_response(self, response: str, response_time: Optional[float] = None):
        """–ö—Ä–∞—Å–∏–≤–æ–µ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –æ—Ç–≤–µ—Ç–∞ –∞–≥–µ–Ω—Ç–∞"""
        if response.startswith("–°–æ–¥–µ—Ä–∂–∏–º–æ–µ —Ç–µ–∫—É—â–µ–π —Ä–∞–±–æ—á–µ–π –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏:"):
            content = Text(response)
            panel = Panel(
                content,
                title="[bold green]ü§ñ Gemini Response[/bold green]",
                border_style="green"
            )
        elif response.startswith('```') and response.endswith('```'):
            lines = response.strip('`').split('\n')
            language = lines[0] if lines[0] else 'text'
            code = '\n'.join(lines[1:])
            
            syntax = Syntax(code, language, theme="monokai", line_numbers=True)
            panel = Panel(
                syntax,
                title="[bold green]ü§ñ Gemini Response (Code)[/bold green]",
                border_style="green"
            )
        else:
            try:
                content = Markdown(response)
            except:
                content = Text(response)
            
            panel = Panel(
                content,
                title="[bold green]ü§ñ Gemini Response[/bold green]",
                border_style="green"
            )
        
        self.console.print(panel)
        
        if response_time:
            self.console.print(f"[dim]‚è±Ô∏è Response time: {response_time:.2f}s[/dim]")
    
    def display_error(self, error_message: str):
        """–û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –æ—à–∏–±–∫–∏"""
        panel = Panel(
            f"‚ùå {error_message}",
            title="[bold red]Error[/bold red]",
            border_style="red"
        )
        self.console.print(panel)
    
    def display_success(self, message: str):
        """–û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ–≥–æ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è"""
        panel = Panel(
            f"‚úÖ {message}",
            title="[bold green]Success[/bold green]",
            border_style="green"
        )
        self.console.print(panel)
    
    def display_status_info(self, status: Dict[str, Any]):
        """–ü–æ–¥—Ä–æ–±–Ω–æ–µ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ —Å–∏—Å—Ç–µ–º—ã"""
        main_table = Table(title="[bold]ü§ñ Smart Agent Status[/bold]", box=box.ROUNDED)
        main_table.add_column("Property", style="cyan")
        main_table.add_column("Value", style="green")
        
        simple_status = {k: v for k, v in status.items() 
                        if not isinstance(v, (dict, list)) or k == 'intelligence_features'}
        
        for key, value in simple_status.items():
            if key == 'intelligence_features':
                value = ', '.join(value)
            table_key = key.replace('_', ' ').title()
            main_table.add_row(table_key, str(value))
        
        self.console.print(main_table)
        
        if 'tools_by_category' in status and status['tools_by_category']:
            tools_table = Table(title="[bold]üîß Tools by Category[/bold]", box=box.SIMPLE)
            tools_table.add_column("Category", style="magenta")
            tools_table.add_column("Count", style="yellow", justify="right")
            
            category_icons = {
                'read_file': 'üìñ',
                'write_file': '‚úèÔ∏è',
                'list_directory': 'üìÅ',
                'create_directory': 'üìÇ',
                'delete_file': 'üóëÔ∏è',
                'move_file': 'üì¶',
                'search': 'üîç',
                'web_search': 'üåê',
                'fetch_url': '‚¨áÔ∏è',
                'other': 'üîß'
            }
            
            for category, count in status['tools_by_category'].items():
                icon = category_icons.get(category, '‚Ä¢')
                category_name = category.replace('_', ' ').title()
                tools_table.add_row(f"{icon} {category_name}", str(count))
            
            self.console.print(tools_table)
        
        if status.get('context_memory_items', 0) > 0:
            memory_panel = Panel(
                f"üß† Context Memory: {status['context_memory_items']} items\n"
                f"üéØ Last Intent: {status.get('last_intent', 'None')}",
                title="[bold]Memory Status[/bold]",
                border_style="blue"
            )
            self.console.print(memory_panel)
    
    def clear_screen(self):
        """–û—á–∏—Å—Ç–∫–∞ —ç–∫—Ä–∞–Ω–∞"""
        self.console.clear()
    
    def print_rule(self, title: str = None):
        """–ü–µ—á–∞—Ç—å —Ä–∞–∑–¥–µ–ª–∏—Ç–µ–ª—å–Ω–æ–π –ª–∏–Ω–∏–∏"""
        self.console.print(Rule(title, style="dim"))
