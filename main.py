#!/usr/bin/env python3
"""
Smart Gemini Agent - –ú–æ–¥—É–ª—å–Ω–∞—è –≤–µ—Ä—Å–∏—è
–¢–æ—á–∫–∞ –≤—Ö–æ–¥–∞ –¥–ª—è –∑–∞–ø—É—Å–∫–∞ –∞–≥–µ–Ω—Ç–∞
"""

import asyncio
import os
import json
import logging
from dotenv import load_dotenv
from rich.console import Console

from smart_gemini_agent import AgentConfig, FileSystemAgent, RichInteractiveChat
from smart_gemini_agent.config.logging_config import setup_logging


async def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Å Rich –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–æ–º"""
    load_dotenv()
    
    # –ó–∞–≥—Ä—É–∑–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –∏–∑ —Ñ–∞–π–ª–∞ –¥–ª—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
    log_level = logging.INFO
    log_file = "ai_agent.log"
    log_format = "%(asctime)s - %(levelname)s - %(message)s"
    try:
        if os.path.exists("config.json"):
            with open("config.json", "r", encoding="utf-8") as f:
                cfg = json.load(f)
            logging_cfg = cfg.get("logging", {})
            level_str = str(logging_cfg.get("level", "INFO")).upper()
            log_level = getattr(logging, level_str, logging.INFO)
            log_file = logging_cfg.get("file", log_file)
            log_format = logging_cfg.get("format", log_format)
    except Exception:
        # –í —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏ –ø—Ä–∏–º–µ–Ω—è–µ–º –∑–Ω–∞—á–µ–Ω–∏—è –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
        pass

    # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è —Å–æ–≥–ª–∞—Å–Ω–æ –∫–æ–Ω—Ñ–∏–≥—É
    logger = setup_logging(level=log_level, log_file=log_file, format_string=log_format)
    
    try:
        # –°–æ–∑–¥–∞–Ω–∏–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –∏–∑ —Ñ–∞–π–ª–∞ –∏–ª–∏ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
        config = AgentConfig.from_file("config.json")
        
        # –ü–µ—Ä–µ–æ–ø—Ä–µ–¥–µ–ª—è–µ–º –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è –µ—Å–ª–∏ –æ–Ω–∏ –∑–∞–¥–∞–Ω—ã
        if os.getenv("FILESYSTEM_PATH"):
            config.filesystem_path = os.getenv("FILESYSTEM_PATH")
        if os.getenv("GEMINI_MODEL"):
            config.model_name = os.getenv("GEMINI_MODEL")
        if os.getenv("TEMPERATURE"):
            config.temperature = float(os.getenv("TEMPERATURE"))
        
        # –°–æ–∑–¥–∞–Ω–∏–µ –∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∞–≥–µ–Ω—Ç–∞
        agent = FileSystemAgent(config)
        
        # –°–æ–∑–¥–∞–µ–º –±–æ–≥–∞—Ç—ã–π –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å –¥–ª—è –ø–æ–∫–∞–∑–∞ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏
        console = Console()
        
        with console.status("[bold green]Initializing Gemini Agent...", spinner="dots"):
            if not await agent.initialize():
                console.print("‚ùå [bold red]–ù–µ —É–¥–∞–ª–æ—Å—å –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å –∞–≥–µ–Ω—Ç–∞[/bold red]")
                return
        
        console.print("‚úÖ [bold green]Gemini Agent successfully initialized![/bold green]")
        
        # –ó–∞–ø—É—Å–∫ –±–æ–≥–∞—Ç–æ–≥–æ —á–∞—Ç–∞
        chat = RichInteractiveChat(agent)
        await chat.run()
        
    except Exception as e:
        Console().print(f"‚ùå [bold red]–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}[/bold red]")
    
    logger.info("üèÅ –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ä–∞–±–æ—Ç—ã")


if __name__ == "__main__":
    asyncio.run(main())